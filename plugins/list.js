const path = require('path');
const fs = require('fs');

// Define the complete path to your assets folder
const ASSETS_FOLDER = path.join(__dirname, '../assets');
const IMAGE_FILE = 'list.jpg';
const IMAGE_PATH = path.join(ASSETS_FOLDER, IMAGE_FILE);

module.exports = {
    name: 'list',
    description: 'Show all available commands with explanations',
    execute: async ({ sock, msg }) => {
        try {
            const commandList = `
üìã *COMMAND LIST* üìã

*üé® TEXT MAKERS* (Use without space after prefix: !fire:text)
‚î£‚ú¶ !fire - Fire text effect
‚î£‚ú¶ !neon - Neon text effect
‚î£‚ú¶ !glitchout - Glitch text effect
‚î£‚ú¶ !hackneon - Hacker neon text
‚î£‚ú¶ !angelwings - Angel wings text
‚î£‚ú¶ !bpink - Blackpink style text
‚î£‚ú¶ !lux - Gold text (use: !lux:goldtext)
‚î£‚ú¶ !moon - Moon text (use: !moon:night)
‚î£‚ú¶ !sliver - Silver text effect
‚î£‚ú¶ !advancedglow - Glowing text
‚î£‚ú¶ !cloudheart - Cloud heart text
‚î£‚ú¶ !window - Window text effect
‚î£‚ú¶ !cat - Cat-themed text maker

*‚öôÔ∏è UTILITY COMMANDS*
‚î£‚ú¶ !ping - Check bot response
‚î£‚ú¶ !owner - Show owner info
‚î£‚ú¶ !dlt - Delete message
‚î£‚ú¶ !clear - Clear chat
‚î£‚ú¶ !alive - Check bot uptime
‚î£‚ú¶ !menu - Show command list
‚î£‚ú¶ !intro - Bot introduction
‚î£‚ú¶ !whois - Get user info
‚î£‚ú¶ !sysinfo - System information
‚î£‚ú¶ !tagall - Mention all group members
‚î£‚ú¶ !tts - Text to speech

*üéµ MEDIA TOOLS*
‚î£‚ú¶ !ytv - Download YouTube video
‚î£‚ú¶ !yta - Download YouTube audio
‚î£‚ú¶ !vv - Anti-view-once message

*ü§ñ AI TOOLS*
‚î£‚ú¶ !gemini - Use Google AI (Gemini)

*üìù NOTES*
1. For text makers: NO space after prefix
   ‚úÖ Correct: !fire:text
   ‚ùå Wrong: ! fire text
2. Some commands need additional parameters
3. Owner commands are restricted
            `;

            // Check if image exists
            if (fs.existsSync(IMAGE_PATH)) {
                await sock.sendMessage(msg.key.remoteJid, {
                    image: { url: IMAGE_PATH },
                    caption: commandList,
                    mimetype: 'image/jpeg'
                });
            } else {
                // Fallback to text-only version
                console.warn(`Image not found at: ${IMAGE_PATH}`);
                await sock.sendMessage(msg.key.remoteJid, {
                    text: commandList + `\n\n‚ÑπÔ∏è Image preview not available (${IMAGE_FILE} missing)`
                });
            }

        } catch (error) {
            console.error('Error in list command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: `üìã *COMMAND LIST* (Text-only version)\n\n${commandList}\n\n‚ùå Error loading image: ${error.message}`
            });
        }
    }
};
